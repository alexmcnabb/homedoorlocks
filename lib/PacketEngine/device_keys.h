// This file contains keys for all the devices
// Entries are added by generate_device_keys.py and can be removed by manually deleting them



#define BASE_HASH_01 {0xE5, 0x65, 0xA0, 0x5F, 0xAC, 0x93, 0x24, 0xB9, 0x6F, 0x38, 0xB1, 0x5E, 0x09, 0xA2, 0xD4, 0x52, 0xAC, 0x4B, 0xA8, 0x7A, 0x1F, 0x55, 0xB7, 0x81, 0x55, 0x4F, 0x20, 0x2B, 0x6F, 0x26, 0x08, 0xB9, 0xF9, 0x11, 0x9C, 0xDC, 0x71, 0xC3, 0x07, 0x2E, 0x10, 0x01, 0xD1, 0xDB, 0xF2, 0x45, 0xAC, 0xC0, 0xFD, 0x20, 0xEE, 0x1D, 0x29, 0x45, 0xB0, 0x16, 0x32, 0x9B, 0x6D, 0x25, 0x7D, 0x9A, 0xBD, 0x46}
#define HASH_TOKEN_01 0x0B8E4481

// --EndOfDeviceKeyDefs--


// The following code should be edited manually to include all required keys
// device id parameter is ignored when getting keys from the remote side, since there's only one key available then
#define REMOTE_COUNT 1
#ifdef DEVICE_ID
    #if(DEVICE_ID == 1)
        const uint8_t BASE_HASH[] = BASE_HASH_01; const uint32_t HASH_TOKEN = HASH_TOKEN_01;
    #endif
#else
    // Note: Make sure to access these arrays with i = (device_id - 1) since they're zero based but device_ids are 1 based
    const uint8_t BASE_HASHS[][64] = {BASE_HASH_01};
    const uint32_t HASH_TOKENS[] = {HASH_TOKEN_01};
#endif
