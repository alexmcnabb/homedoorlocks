// This file contains keys for all the devices
// Entries are added by generate_device_keys.py and can be removed by manually deleting them



#define BASE_HASH_01 {0x69, 0xBC, 0x6E, 0xD4, 0x7A, 0x08, 0xD1, 0xAE, 0xBF, 0x08, 0xE9, 0x9E, 0xD7, 0x1C, 0x23, 0x4B, 0x55, 0xE1, 0xE4, 0xD1, 0x3E, 0x88, 0x81, 0x2E, 0x59, 0x15, 0x2A, 0xF9, 0x6D, 0x79, 0xDC, 0x3E, 0x83, 0x62, 0x01, 0x14, 0x90, 0x3E, 0xC2, 0x46, 0x39, 0xC4, 0x7A, 0xC3, 0xF7, 0x1C, 0x84, 0xA0, 0x3C, 0x7B, 0x07, 0x61, 0x2B, 0x6A, 0x3C, 0x8E, 0xDC, 0x4E, 0xA7, 0x81, 0x36, 0xBD, 0xA9, 0x94}
#define HASH_TOKEN_01 0xD5D3213D

// --EndOfDeviceKeyDefs--


// The following code should be edited manually to include all required keys
// device id parameter is ignored when getting keys from the remote side, since there's only one key available then
#define REMOTE_COUNT 1
#ifdef DEVICE_ID
    #if(DEVICE_ID == 1)
        const uint8_t BASE_HASH[] = BASE_HASH_01; const uint32_t HASH_TOKEN = HASH_TOKEN_01;
    #endif
#else
    // Note: Make sure to access these arrays with i = (device_id - 1) since they're zero based but device_ids are 1 based
    const uint8_t BASE_HASHS[][64] = {BASE_HASH_01};
    const uint32_t HASH_TOKENS[] = {HASH_TOKEN_01};
#endif
