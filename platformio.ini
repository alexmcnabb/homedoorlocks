[platformio]
; env_default = lockModule
default_envs = baseStation

[env]
platform = atmelavr
framework = arduino
lib_deps = rweather/Crypto@^0.2.0





[env:lockModule]

board = ATmega328P
board_build.f_cpu = 8000000L
monitor_port = COM7
monitor_speed = 115200
build_src_filter = +<*> -<main_base_station.cpp>

# Set this device ID seperately for each device
# Modify SWAPLU if lock reports locked and unlocked status incorrectly
build_flags = -DDEVICE_ID=1 -DSWAPLU=false ; Front door
; build_flags = -DDEVICE_ID=2 -DSWAPLU=true ; Back door

upload_port = COM4
upload_speed = 1000000
upload_protocol = stk500v1
extra_scripts = upload_intermediary.py

; Fuses:
; 0xE2 0xD1 0xFF (8Mhz internal osc, preserve eeprom, no bod)

; Using the Uno-as-programmer to program the lock module
; Uploading through platformIO adds the -D parameter to avrdude for some reason, which causes errors during verification
; extra_scripts above, 

; Programmming through platformIO should work, but it throws random verification errors. This is because it's inserting a -D into the avrdude args incorrectly.
; upload_intermediary.py replaces avrdude with itself, then calls avrdude without the -D argument to actually upload






[env:baseStation]
board = sparkfun_promicro8
board_build.f_cpu = 8000000L
build_src_filter = +<*> -<main_lock_module.cpp> -<lockcontrol.cpp>
board_build.usb_product = "doorlock_basestation",

monitor_port = COM9

; Note: Set the fuses to FF D0 CE - These should be the defaults for an ATmega32u4 but with EESAVE enabled
; The PCB has an 8Mhz crystal onboard

; Upload should work over USB directly, if it fails you can force upload a blink.ino with bootloader over SPI and then it should work
; Alternately you can set upload_protocol = usbtiny and use that to upload here
; Blink.ino.with_bootloader.promicro_8mhz.hex is included here, it was created with the Arduino IDE, a default blink example, and the board configured for the SparkfunProMicro at 8Mhz
